[0m[1;31m--- [35m[[37m3[35m][0m [1;33mOptimizing Hello World in Assembly[0m [1;31m---------------------------------[37m//[31m--[0m

[31m[[1;37m CODE - smile.asm [0;31m][37m

[1;35mSECTION .DATA[0m
[1m  [35mmsg:     db[37m [33m"[^0^] u!!"[37m,[36m10[0m
[1m  [35mmsgLen:  equ $[37m-[35mmsg[0m

[1;35mSECTION .TEXT[0m
[1;35mGLOBAL _start[0m

[1;35m_start:[0m
; Print ----------------------------------------------------------------
[1m  [31mmov[37m [36mal[37m, [32m1[37m       [0m; RAX holds syscall 1 (write). We are using the lower
[1m                  [0m; 8 bits of RAX with AL. This takes up less bytes.
[1m  [31mmov[37m [36mrdi[37m, [36mrax    [0m; RDI holds the file descriptor - STDOUT. We copy the
[1m                  [0m; value in RAX and move it there to save space.
[1m  [31mmov[37m [36mrsi[37m,[35m msg    [0m; RSI contains the address of our buffer.
[1m  [31mmov[37m [36mdl[37m, [35mmsgLen[37m  [0m; RDX holds the length of the buffer. We are the lower
[1m                  [0m; 8 bits, DL, again for this.
[1m  [31msyscall[37m         [0m; Now we call the kernel.

; Exit -----------------------------------------------------------------
[1m  [31mmov[37m [36mal[37m,[32m 60[37m      [0m; We are now executing syscall 60 - Exit
[1m  [31mxor[37m [36mrdi[37m, [36mrdi[37m    [0m; RDI contains the return value, here it will be 0!
[1m  [31msyscall[37m         [0m; Call the kernel one last time[1m.[0m

[31m[[1;37m Build & Run [0;31m][37m

 [1;36mnasm -f elf64 smile.asm -o smile.o[0m
[1;36m ld smile.o -o smile[0m
 [1;36m./smile[0m

[31m---[1;37m Note about Registers[0;31m ---[37m

[1;33mREF:[37m [32mhttps://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture[0m

[1m Registers in x86 can be divided into smaller registers that hold different[0m
[1m sized values.[0m

[31m[[1;37m Example [0;31m][37m

[1m [36mRAX[37m is a 64 bit register. It can be broken down like this.[0m

[1m    [36mRAX[37m [36m00000000000000000000000000000000[33m0000000000000000[34;47m00000000[32m00000000[37;40m [35m64[0m
[1m    [33mEAX[37m                                 [33m0000000000000000[34;47m00000000[32m00000000[37;40m [35m32[0m
[1m     [34;47mA[32mX[31;40m                                                 [34;47m00000000[32m00000000[31;40m [35m16[0m
[1m     [34mAH[36m                                                 [34m00000000[0;31m          [1;35m8[0m
[1m     [32mAL[36m                                                         [32m00000000  [35m8[0m

[1m Here is a table of all the general purpose registers with their respective[0m
[1m subdivisions.[0m

[1m       [31m+-------+-------+-------+-------+-------+-------+-------+-------+[0m
[1m    [36m64[37m [31m|[37m   [36mRAX[37m [31m|[37m   [36mRCX[37m [31m|[37m   [36mRDX[37m [31m|[37m   [36mRBX[37m [31m|[37m   [36mRSP [31m|[37m   [36mRBP[37m [31m|[37m   [36mRSI[37m [31m|   [36mRDI[37m [31m|[0m
[1m    [33m32[37m [31m|[37m   [33mEAX[37m [31m|[33m   ECX[37m [31m|[37m   [33mEDX [31m|[37m   [33mEBX[37m [31m|[37m   [33mESP[37m [31m|[37m   [33mEBP [31m|[37m   [33mESI[31m |   [33mEDI [31m|[0m
[1m    [0;30;47m16[1;37;40m [31m|[37m    [0;30;47mAX[1;37;40m [31m|[37m    [0;30;47mCX[1;37;40m [31m|[37m    [0;30;47mDX[1;37;40m [31m|[37m    [0;30;47mBX[1;37;40m [31m|[37m    [0;30;47mSP[1;37;40m [31m|[37m    [0;30;47mBP[1;37;40m [31m|[37m    [0;30;47mSI[1;31;40m |    [0;30;47mDI[1;37;40m [31m|[0m
[1m     [32m8[37m [31m|[37m [34mAH[37m|[32mAL[37m [31m|[37m [34mCH[37m|[32mCL[37m [31m|[37m [34mDH[37m|[32mDL[37m [31m|[37m [34mBH[37m|[32mBL[37m [31m|[37m  |[32mSPL[37m [31m|[37m  |[32mBPL[37m [31m|[37m  |[32mSIL[31m |[37m  |[32mDIL[37m [31m|[0m
[1m       [31m+-------+-------+-------+-------+-------+-------+-------+-------+[0m

[1m In our newly optimized code, we save space by using the lower 8 bits of[0m
[1m RAX and RDX. This is because we are only moving 8 byte values.[0m
[1m Registers define the total bit width of the number, so using a 64 bit[0m
[1m register will make the integer 1 look like:[0m

[1m  [0m000000000000000000000000000000000000000000000000000000000000000[1;32m1[0m

 [1mWhile using the lower 8 bits will make the integer 1 look like:[0m

  0000000[1;36m1[0m

[1m This reduces the size of the integer on disk by 3 bytes, and the total[0m
[1m instruction size by 5 bytes. This may seem insignificant, but it adds up.[0m

             [1;33m48 c7 c0 01 00 00 00    [31mmov    [36mrax[37m, [32m1   [0m; 7 Bytes
             [1;33mb0 01[37m                   [31mmov     [36mal[37m, [32m1   [0m; 2 Bytes


 [1mAnother optimization we are using is copying a register to another, instead[0m
[1m of moving a number into a register.[0m

             [1;33m48 c7 c7 01 00 00 00[37m    [31mmov[36m    rdi[37m, [32m1[37m   [0m; 7 Bytes
             [1;33m48 89 c7                [31mmov[37m    [36mrdi[37m,[36mrax[37m  [0m; 3 Bytes

 [1mThe last optimization we did was XORing RDI with itself. This is a common[0m
[1m way to create a 0, rather than moving a 0 into the register.[0m

             [1;33m48 c7 c7 00 00 00 00[37m    [31mmov[37m    [36mrdi[37m,[32m0[37m    [0m; 7 Bytes
             [1;33m48 31 ff                [31mxor[37m    [36mrdi[37m,[36mrdi[0m  ; 3 Bytes

 [1mWe'll cover even more optimizations later on in the workshop.[0m

[31m[[1;37m Making the binary smaller [0;31m][37m

 [1mYou can use strip to reduce the binary's size. This removes debug symbols[0m
 [1mthat are unnecessary for running the binary on a system.[0m

[1;36m ls -lah smile[0m
 [1;36mstrip[0m [1;36msmile[0m
[1;36m ls -lah smile[0m

 [1mYou'll see that the binary is now much smaller.[0m

[31m[[1;37m Changes [0;31m][37m

[1m [0;31m-[1;37m Use smaller registers[0m
[1m [0;31m-[1;37m XOR a register with itself to create a 0[0m
[1m [0;31m-[1;37m Copy data between registers instead of moving a number into it[0m
[1m [0;31m-[1;37m Use Strip to strip the data[0m

 [1;31m-----------------------------------------------------------------------------[0m
[1;32m  [0;31m[[1;32m [37mPREV[0m [31m][1;32m [36mcurl -sL n0.lol/i2ao/2             [0;31m[[1;37m NEXT[32m [0;31m][1;32m [36mcurl -sL n0.lol/i2ao/4[0m

